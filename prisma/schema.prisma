// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Obs. Local variable name altered in Vercel for "DATABASE_URL"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String
  indReferentNumber String
  website           String
  category          String
  city              String
  street            String
  houseNumber       String
  postCode          String
  latitude          Float?
  longitude         Float?
  display           Boolean  @default(true)

   tags Tag[] @relation("CompanyTag")

  userEvent         UserEvent[]             

  @@unique([name, postCode])
}

model Tag {
  id      String   @id @default(cuid())
  title    String   @unique
  category String
   companies Company[] @relation("CompanyTag")
}


model UserEvent {
  id                String  @id @default(cuid())
  createdAt         DateTime
  userId            String
  companyId         String

  user              User     @relation(fields: [userId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userEvent     UserEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}